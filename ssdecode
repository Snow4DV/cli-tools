#!/bin/bash

SERVERS_PATH="$HOME/.config/sssclient/servers"
CONFIG_PATH="$HOME/.config/sssclient/config.json"
CONFIG_DIR="$HOME/.config/sssclient/"

if [ ! -d "$HOME/.config" ]; then
	mkdir "$HOME/.config"
fi

if [ ! -d "$CONFIG_DIR" ]; then
	mkdir "$CONFIG_DIR"
fi

# Create config file if it doesnt exist
if [ ! -f "$CONFIG_PATH" ]; then
  echo "Config file not found: $CONFIG_PATH"
  echo "Creating config file."
  echo "{\"ipinfo_token\":\"STUB\"}" > "$CONFIG_PATH"
fi

# Used to determine country 
ipinfo_token=$(jq -r '.ipinfo_token' "$CONFIG_PATH")

if [ "$ipinfo_token" = "STUB" ]; then
	echo "Token is not entered to the config file. Fill it in in order to determine server's country"
fi

# Get the list of servers
servers=()

if [ ! -f "$SERVERS_PATH" ]; then
	echo "Servers file not found. Creating one"
	touch "$SERVERS_PATH"
fi

# read the file line by line using a while loop and a file descriptor
while IFS= read -r server <&3; do
    # add each line to the array variable
    servers+=("$server")
done 3< "$SERVERS_PATH"

# Check if there's anything coming through the pipe
if ! read -t 0 ; then
    echo "Select a server by number or enter a new SS:// URI:"
    select server in "${servers[@]}" "New SS:// URI"; do
        if [ "$server" == "New SS:// URI" ]; then
            read -p "Enter SS:// URI: " ss_uri
            break
        elif [ -n "$server" ]; then
            ss_uri=$server
            break
        else
            echo "Invalid option. Try again."
        fi
    done
else
    read ss_uri
fi
# Extract encryption algorithm and password from SS URI
ss_uri=$(echo "$ss_uri" | cut -d' ' -f1) # cut description
ss_decoded=$(echo $ss_uri | sed 's/ss:\/\///' | cut -d'@' -f1 | tr -d '\n' | base64 -d)
ss_parts=(${ss_decoded//:/ })
encryption=${ss_parts[0]}
password=${ss_parts[1]}

# Extract host and port from SS URI
ss_uri=${ss_uri#*\/\/}
ss_uri=${ss_uri%/*}
# parse host and port from the SS uri
host_port=$(echo "$ss_uri" | cut -d'@' -f2)
host_port=(${host_port//:/ })
# Check if server already exists in the file
echo "$ss_uri"
if grep -Exq "^$ss_uri .*" "$SERVERS_PATH"
then
    echo "Server already exists in the file so i don't add it there"
else
    if [ "$ipinfo_token" = "STUB" ]; then
	    echo "IPINFO token is still not filled in. I will not recognize the country of VPN server automatically"
	    country="N/A"
    else
        # Add server to the file
        country=$(curl -sS "https://ipinfo.io/${host_port[0]}/country?token=$ipinfo_token")
	if [[ "$country" == *"error"* ]]; then
		echo "Failed to determine country. Check your token."
		country="N/A"
	fi
    fi
    echo "Determined country: $country"
    echo "$ss_uri [$country]" >> $SERVERS_PATH
    echo "Server added to the file"
fi

echo "Encoding method: '$encryption' Password: '$password'"
# Create proxy using sslocal command
sslocal_command="sslocal -m $encryption -k $password -s ${host_port[0]}:${host_port[1]} --local-addr 127.0.0.1:1080 --protocol http"
$sslocal_command

